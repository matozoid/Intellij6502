{
	parserClass="com.laamella.intellij6502.asm.AssemblyParser"

	extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

	psiClassPrefix="Assembly"
	psiImplClassSuffix="Impl"
	psiPackage="com.laamella.intellij6502.asm.psi"
	psiImplPackage="com.laamella.intellij6502.asm.psi.impl"

	elementTypeHolderClass="com.laamella.intellij6502.asm.psi.AssemblyTypes"
	elementTypeClass="com.laamella.intellij6502.asm.psi.AssemblyElementType"
	tokenTypeClass="com.laamella.intellij6502.asm.psi.AssemblyTokenType"

	extends(".*expr")=expr
}

AssemblyFile::= (line EOL)* line?

line ::= (
  symbol_assignment_line
| instruction_line
| control_command_line
| user_command_line
| only_a_label_line)? COMMENT? {pin=1 recoverWhile=line_recover}

private line_recover::=!EOL

symbol_assignment_line ::=  (label|TIMES) assignment
instruction_line ::=        label? OPCODE operand?
control_command_line ::=    label? control_command
user_command_line ::=       label? (DOT|HEKJE) IDENTIFIER expressions?
only_a_label_line ::=       label

label ::= (IDENTIFIER COLON? | PLUS | MINUS)

operand::= (
	OPEN_PAREN expr CLOSE_PAREN COMMA IDENTIFIER |
	OPEN_PAREN expr CLOSE_PAREN |
	OPEN_PAREN expr COMMA IDENTIFIER CLOSE_PAREN |
	HEKJE expr |
	expr (COMMA IDENTIFIER)? |
)

expressions::=expr (',' expr)*

assignment ::= (
		IS|
		COLON_IS|
		ADD_COMPOUND|
        SUBTRACT_COMPOUND|
        MULTIPLY_COMPOUND|      
        DIVIDE_COMPOUND|        
        MODULO_COMPOUND|        
        RAISE_TO_POWER_COMPOUND|
        BINARY_OR_COMPOUND|     
        BINARY_XOR_COMPOUND|    
        BINARY_AND_COMPOUND|    
        LOGICAL_OR_COMPOUND|    
        LOGICAL_AND_COMPOUND|   
        SHIFT_LEFT_COMPOUND|    
        SHIFT_RIGHT_COMPOUND|   
        CONCAT_COMPOUND|        
        SMALLER_COMPOUND|       
        GREATER_COMPOUND|       
        REPEAT_COMPOUND|        
        MEMBER_COMPOUND) expr

control_command::=DOT IDENTIFIER (control_command_param (COMMA control_command_param)*)?
control_command_param::=(QUESTION|IDENTIFIER assignment|expr)

expr ::=  unary_group
            | add_group
  | mul_group
  | equality_group
  | boolean_group
  | qualification_expr
  | primary_group

// private rules to define operators with the same priority
private add_group ::= add_expr
private mul_group ::= mul_expr
private unary_group ::= unary_or_label_expr | unary_expr | list_access_expr | function_call_expr | simple_member_expr
private equality_group ::= equality_expr
private boolean_group ::= boolean_expr
private primary_group ::= tuple_expr | dictionary_expr | primary_expr | ternary_expr | list_expr

// public rules for each expression
unary_or_label_expr ::= (PLUS|MINUS) expr?
unary_expr ::=(TILDE|EXCLAMATION|TIMES|LESS|GREATER|LOWER_WORD|LOWER_BYTE_SWAPPED_WORD|HIGHER_WORD|DAKJE|BANK_BYTE|FORCE_8_BIT_ADDRESS|FORCE_16_BIT_ADDRESS|FORCE_24_BIT_ADDRESS) expr

mul_expr ::= expr (DIV|TIMES|POW|MODULO|AND|DAKJE|SHIFT_LEFT|SHIFT_RIGHT) expr

add_expr ::= expr (MINUS|PLUS|PIPE|CONCAT|IN) expr

equality_expr ::= expr (COMPARE|EQUAL|NOT_EQUAL|LESS|GREATER|LESS_EQUAL|GREATER_EQUAL) expr

boolean_expr ::= expr (BOOLEAN_AND|BOOLEAN_OR|BOOLEAN_XOR|BOOLEAN_GREATER_THAN|BOOLEAN_LESS_THAN) expr

tuple_expr ::= OPEN_PAREN expressions CLOSE_PAREN
list_access_expr ::= expr OPEN_BRACKET
		(expr? COLON COMMA? expr? COLON expr? | expr? COLON COMMA? expr? | expr?)
		CLOSE_BRACKET
dictionary_expr ::= OPEN_BRACE (dictionary_entry (COMMA dictionary_entry)*)? CLOSE_BRACE
dictionary_entry ::=expr? COLON expr?
ternary_expr ::= expr QUESTION expr COLON expr
list_expr ::= OPEN_BRACKET expr (COMMA expr)* CLOSE_BRACKET

fake member_expr ::= expr? DOT IDENTIFIER
simple_member_expr ::= IDENTIFIER {extends=member_expr elementType=member_expr}
qualification_expr ::= expr DOT IDENTIFIER {extends=member_expr elementType=member_expr}

primary_expr::=
(   any_number
|   STRING_SINGLE_QUOTED
|   STRING_DOUBLE_QUOTED
|   PARAMETER_USAGE
|   OPCODE
|   FUNCTION
)

any_number ::= (NUMBER|HEX_NUMBER|BINARY_NUMBER)

left function_call_expr ::= IDENTIFIER OPEN_PAREN (function_call_param (COMMA function_call_param)*)? CLOSE_PAREN
function_call_param::=expr
